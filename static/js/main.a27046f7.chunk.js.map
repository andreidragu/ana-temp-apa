{"version":3,"sources":["TempCard.js","TempData.js","App.js","serviceWorker.js","index.js"],"names":["TempCard","props","title","subtitle","react_default","a","createElement","TempData","_this$props","this","classes","xmlData","temp1","sec0","temp2","sec1","temp3","sec2","temp4","sec3","temp5","sec4","state1","di0","state2","di1","pompa1State","pompa2State","pompa1Color","pompa2Color","className","root","Grid","container","spacing","item","xs","Paper","paper","style","backgroundColor","src_TempCard","sm","Component","withStyles","theme","flexGrow","maxWidth","padding","textAlign","color","palette","text","primary","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","useStyles","makeStyles","progress","margin","loadAppData","fetch","then","response","str","window","DOMParser","parseFromString","data","state","firstLoad","setState","isLoading","xmlToJson","CircularProgress","src_TempData","xml","obj","nodeType","attributes","length","j","attribute","nodeName","nodeValue","hasChildNodes","childNodes","i","push","old","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a27046f7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction TempCard(props) {\r\n    const { title, subtitle } = props;\r\n    return (\r\n        <div>\r\n            <h1>{title}</h1>\r\n            <h2>{subtitle}</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TempCard;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TempCard from './TempCard';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        maxWidth: '90vw'\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(3),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.primary,\r\n    },\r\n});\r\n\r\nclass TempData extends Component {\r\n    render() {\r\n        const { classes, xmlData } = this.props;\r\n        const temp1 = xmlData ? xmlData.sec0 + '°C' : '-',\r\n            temp2 = xmlData ? xmlData.sec1 + '°C' : '-',\r\n            temp3 = xmlData ? xmlData.sec2 + '°C' : '-',\r\n            temp4 = xmlData ? xmlData.sec3 + '°C' : '-',\r\n            temp5 = xmlData ? xmlData.sec4 + '°C' : '-';\r\n\r\n        const stateON = 'PORNIT',\r\n            stateOFF = 'OPRIT';\r\n        const state1 = xmlData && xmlData.di0 === 'up' ? true : false,\r\n            state2 = xmlData && xmlData.di1 === 'up' ? true : false;\r\n\r\n        const pompa1State = state1 ? stateON : stateOFF,\r\n            pompa2State = state2 ? stateON : stateOFF;\r\n        const pompa1Color = state1 ? 'lightseagreen' : 'lightcoral',\r\n            pompa2Color = state2 ? 'lightseagreen' : 'lightcoral';\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <Paper className={classes.paper} style={{ backgroundColor: 'orange' }}>\r\n                            <TempCard title='Bazin 1' subtitle={temp1}></TempCard>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Paper className={classes.paper} style={{ backgroundColor: 'skyblue' }}>\r\n                            <TempCard title='Bazin 2' subtitle={temp2}></TempCard>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Paper className={classes.paper} style={{ backgroundColor: 'yellow' }}>\r\n                            <TempCard title='Bazin 3' subtitle={temp3}></TempCard>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Paper className={classes.paper} style={{ backgroundColor: 'palegoldenrod' }}>\r\n                            <TempCard title='Bazin 4' subtitle={temp4}></TempCard>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Paper className={classes.paper} style={{ backgroundColor: 'plum' }}>\r\n                            <TempCard title='Bazin 5' subtitle={temp5}></TempCard>\r\n                        </Paper>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <Paper className={classes.paper} style={{ backgroundColor: pompa1Color }}>\r\n                            <TempCard title='Pompa 1' subtitle={pompa1State}></TempCard>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Paper className={classes.paper} style={{ backgroundColor: pompa2Color }}>\r\n                            <TempCard title='Pompa 2' subtitle={pompa2State}></TempCard>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nTempData.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(TempData);","import React, { Component } from 'react';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport TempData from './TempData';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      firstLoad: true\n    };\n    this.classes = this.useStyles();\n    this.loadAppData();\n  }\n\n  useStyles = () => makeStyles(theme => ({\n    progress: {\n      margin: theme.spacing(2),\n    },\n  }));\n\n  loadAppData = () => {\n    fetch('https://cors-anywhere.herokuapp.com/https://24systems.ro/xml-php/st0.xml')\n      .then(response => response.text())\n      .then(str => (new window.DOMParser()).parseFromString(str, \"application/xml\"))\n      .then(data => {\n        if (this.state.firstLoad) {\n          this.setState(state => { return { isLoading: false } });\n          this.setState(state => { return { firstLoad: false } });\n        }\n        this.setState(state => {\n          return {\n            xmlData: this.xmlToJson(data).response\n          };\n        });\n      });\n  };\n\n  render() {\n    return (\n      <div className='App' >\n        {\n          this.state.isLoading ?\n            <CircularProgress className={this.classes.progress} /> :\n            <TempData xmlData={this.state.xmlData} />\n        }\n      </div>\n    );\n  }\n\n  // Changes XML to JSON\n  // Modified version from here: http://davidwalsh.name/convert-xml-json\n  xmlToJson(xml) {\n\n    // Create the return object\n    var obj = {};\n\n    if (xml.nodeType === 1) { // element\n      // do attributes\n      if (xml.attributes.length > 0) {\n        obj[\"@attributes\"] = {};\n        for (var j = 0; j < xml.attributes.length; j++) {\n          var attribute = xml.attributes.item(j);\n          obj[\"@attributes\"][attribute.nodeName] = attribute.nodeValue;\n        }\n      }\n    } else if (xml.nodeType === 3) { // text\n      obj = xml.nodeValue;\n    }\n\n    // do children\n    // If just one text node inside\n    if (xml.hasChildNodes() && xml.childNodes.length === 1 && xml.childNodes[0].nodeType === 3) {\n      obj = xml.childNodes[0].nodeValue;\n    }\n    else if (xml.hasChildNodes()) {\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var item = xml.childNodes.item(i);\n        var nodeName = item.nodeName;\n        if (typeof (obj[nodeName]) == \"undefined\") {\n          obj[nodeName] = this.xmlToJson(item);\n        } else {\n          if (typeof (obj[nodeName].push) == \"undefined\") {\n            var old = obj[nodeName];\n            obj[nodeName] = [];\n            obj[nodeName].push(old);\n          }\n          obj[nodeName].push(this.xmlToJson(item));\n        }\n      }\n    }\n    return obj;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}